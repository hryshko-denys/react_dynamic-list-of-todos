{"version":3,"sources":["api/api.ts","constants.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/Buttons/ButtonData.ts","components/Buttons/Buttons.tsx","App.tsx","index.tsx"],"names":["getData","url","a","fetch","then","respond","json","response","data","getPrepearedTodos","todos","users","map","todo","user","find","person","id","userId","TodoItem","completed","title","className","name","TodoList","task","key","ButtonsData","Buttons","onFilter","button","onClick","type","App","useState","todoList","setTodoList","isLoading","setLoading","getList","length","newList","sort","todoA","todoB","localeCompare","Number","getNewData","disabled","ReactDOM","render","document","getElementById"],"mappings":"2UAGMA,EAAO,uCAAG,WAAUC,GAAV,eAAAC,EAAA,sEACSC,MAAMF,GAAKG,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UAD5C,cACRC,EADQ,yBAGPA,EAASC,MAHF,2CAAH,sDAMAC,EAAiB,uCAAG,8BAAAP,EAAA,sEACXF,ECVO,2CDSI,cACzBU,EADyB,gBAEXV,ECVO,2CDQI,cAEzBW,EAFyB,yBAIxBD,EAAME,KAAI,SAAAC,GAAI,kCAChBA,GADgB,IAEnBC,KAAMH,EAAMI,MAAK,SAAAC,GAAM,OAAIA,EAAOC,KAAOJ,EAAKK,gBANjB,2CAAH,qDEDjBC,G,MAAsB,SAAC,GAAc,IAAZN,EAAW,EAAXA,KAC5BO,EAA2BP,EAA3BO,UAAWC,EAAgBR,EAAhBQ,MAAOP,EAASD,EAATC,KAE1B,OACE,oCACE,yBAAKQ,UAAWF,EAAY,OAAS,WACrC,uBAAGE,UAAU,QACVD,GAEH,uBAAGC,UAAU,UACVR,EAAKS,SCVDC,EAAsB,SAAC,GAAD,IAAGd,EAAH,EAAGA,MAAH,OACjC,wBAAIY,UAAU,QACXZ,EAAME,KAAI,SAAAa,GAAI,OACb,wBAAIC,IAAKD,EAAKR,GAAIK,UAAU,YAC1B,kBAAC,EAAD,CAAUT,KAAMY,UCRXE,EAAwB,CACnC,CACEN,MAAO,iBAET,CACEA,MAAO,qBAET,CACEA,MAAO,iBCJEO,G,MAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACvC,oCACGF,EAAYf,KAAI,SAAAkB,GAAM,OACrB,4BACER,UAAU,SACVS,QAAS,kBAAMF,EAASC,EAAOT,QAC/BK,IAAKI,EAAOT,MACZW,KAAK,UAEJF,EAAOT,aC4CDY,G,MAtDC,WAAO,IAAD,EACYC,mBAA0B,IADtC,mBACbC,EADa,KACHC,EADG,OAEYF,oBAAS,GAFrB,mBAEbG,EAFa,KAEFC,EAFE,KAIdC,EAAO,uCAAG,sBAAArC,EAAA,6DACdoC,GAAW,GADG,SAER7B,IAAoBL,MAAK,SAAAI,GAAI,OAAI4B,EAAY5B,MAFrC,OAGd8B,GAAW,GAHG,2CAAH,qDA0Bb,OACE,yBAAKhB,UAAU,WACb,qDACA,2BACE,yCACCa,EAASK,QAEVL,EAASK,OAUP,kBAAC,EAAD,CAASX,SA1BI,SAACR,GACpBiB,GAAW,GAEX,IAAMG,EAdW,SAACpB,EAAeb,GACjC,OAAQa,GACN,IAAK,gBACH,OAAO,YAAIb,GAAMkC,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMtB,MAAMwB,cAAcD,EAAMvB,UAC1E,IAAK,oBACH,OAAO,YAAIb,GAAMkC,MAAK,SAACC,EAAOC,GAAR,OAAkBE,OAAOF,EAAMxB,WAAa0B,OAAOH,EAAMvB,cACjF,QACE,OAAO,YAAIZ,GAAMkC,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAM7B,KAAKS,KAAKsB,cAAcD,EAAM9B,KAAKS,UAOrEwB,CAAW1B,EAAOc,GAElCC,EAAYK,GACZH,GAAW,MAYL,4BACEN,KAAK,SACLD,QAASQ,EACTS,SAAUX,GAETA,EAAY,UAAY,QAK/B,kBAAC,EAAD,CAAU3B,MAAOyB,OCpDvBc,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.645ae1e4.chunk.js","sourcesContent":["import { API_URL_TODOS, API_URL_USERS } from '../constants';\nimport { Todo, User, TodosWithUser } from '../interfaces';\n\nconst getData = async <T>(url: string): Promise<T[]> => {\n  const response = await fetch(url).then(respond => respond.json());\n\n  return response.data;\n};\n\nexport const getPrepearedTodos = async (): Promise<TodosWithUser[]> => {\n  const todos = await getData<Todo>(API_URL_TODOS);\n  const users = await getData<User>(API_URL_USERS);\n\n  return todos.map(todo => ({\n    ...todo,\n    user: users.find(person => person.id === todo.userId) as User,\n  }));\n};\n","export const API_URL_TODOS = 'https://mate.academy/students-api/todos';\nexport const API_URL_USERS = 'https://mate.academy/students-api/users';\n","import React, { FC } from 'react';\nimport './TodoItem.css';\nimport { TodosWithUser } from '../../interfaces';\n\ninterface Props {\n  todo: TodosWithUser;\n}\n\nexport const TodoItem: FC<Props> = ({ todo }) => {\n  const { completed, title, user } = todo;\n\n  return (\n    <>\n      <div className={completed ? 'done' : 'undone'} />\n      <p className=\"task\">\n        {title}\n      </p>\n      <p className=\"person\">\n        {user.name}\n      </p>\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { TodosWithUser } from '../../interfaces';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ninterface Props {\n  todos: TodosWithUser[];\n}\n\nexport const TodoList: FC<Props> = ({ todos }) => (\n  <ul className=\"list\">\n    {todos.map(task => (\n      <li key={task.id} className=\"listItem\">\n        <TodoItem todo={task} />\n      </li>\n    ))}\n  </ul>\n);\n","export interface Button {\n  title: string;\n}\n\nexport const ButtonsData: Button[] = [\n  {\n    title: 'Sort by title',\n  },\n  {\n    title: 'Sort by completed',\n  },\n  {\n    title: 'Sort by name',\n  },\n];\n","import React, { FC } from 'react';\nimport { ButtonsData } from './ButtonData';\nimport './Buttons.css';\n\ninterface ButtonsProps {\n  onFilter: (title: string) => void;\n}\n\nexport const Buttons: FC<ButtonsProps> = ({ onFilter }) => (\n  <>\n    {ButtonsData.map(button => (\n      <button\n        className=\"button\"\n        onClick={() => onFilter(button.title)}\n        key={button.title}\n        type=\"button\"\n      >\n        {button.title}\n      </button>\n    ))}\n  </>\n);\n","import React, { FC, useState } from 'react';\nimport { TodosWithUser } from './interfaces';\nimport { getPrepearedTodos } from './api/api';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { Buttons } from './components/Buttons/Buttons';\nimport './App.css';\n\nconst App: FC = () => {\n  const [todoList, setTodoList] = useState<TodosWithUser[]>([]);\n  const [isLoading, setLoading] = useState(false);\n\n  const getList = async () => {\n    setLoading(true);\n    await getPrepearedTodos().then(data => setTodoList(data));\n    setLoading(false);\n  };\n\n  const getNewData = (title: string, data: TodosWithUser[]): TodosWithUser[] => {\n    switch (title) {\n      case 'Sort by title':\n        return [...data].sort((todoA, todoB) => todoA.title.localeCompare(todoB.title));\n      case 'Sort by completed':\n        return [...data].sort((todoA, todoB) => Number(todoB.completed) - Number(todoA.completed));\n      default:\n        return [...data].sort((todoA, todoB) => todoA.user.name.localeCompare(todoB.user.name));\n    }\n  };\n\n  const handleFilter = (title: string) => {\n    setLoading(true);\n\n    const newList = getNewData(title, todoList);\n\n    setTodoList(newList);\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"heading\">\n      <h1>Dynamic list of TODOs</h1>\n      <p>\n        <span>Todos: </span>\n        {todoList.length}\n      </p>\n      {!todoList.length\n        ? (\n          <button\n            type=\"button\"\n            onClick={getList}\n            disabled={isLoading}\n          >\n            {isLoading ? 'loading' : 'Load'}\n          </button>\n        )\n        : <Buttons onFilter={handleFilter} />}\n\n      <TodoList todos={todoList} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}