{"version":3,"sources":["api/api.ts","constants.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["getData","url","a","fetch","then","respond","json","response","data","getPrepearedTodos","todos","users","map","todo","user","find","person","id","userId","TodoItem","completed","title","className","name","TodoList","task","key","App","state","isLoading","todoList","getList","setState","combinedData","this","length","type","onClick","disabled","React","Component","ReactDOM","render","document","getElementById"],"mappings":"oUAGMA,EAAO,uCAAG,WAAUC,GAAV,eAAAC,EAAA,sEACSC,MAAMF,GAAKG,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UAD5C,cACRC,EADQ,yBAGPA,EAASC,MAHF,2CAAH,sDAMAC,EAAiB,uCAAG,8BAAAP,EAAA,sEACXF,ECVO,2CDSI,cACzBU,EADyB,gBAEXV,ECVO,2CDQI,cAEzBW,EAFyB,yBAIxBD,EAAME,KAAI,SAAAC,GAAI,kCAChBA,GADgB,IAEnBC,KAAMH,EAAMI,MAAK,SAAAC,GAAM,OAAIA,EAAOC,KAAOJ,EAAKK,gBANjB,2CAAH,qDEDjBC,G,MAAsB,SAAC,GAAc,IAAZN,EAAW,EAAXA,KAC5BO,EAA2BP,EAA3BO,UAAWC,EAAgBR,EAAhBQ,MAAOP,EAASD,EAATC,KAE1B,OACE,oCACE,yBAAKQ,UAAWF,EAAY,OAAS,WACrC,uBAAGE,UAAU,QACVD,GAEH,uBAAGC,UAAU,UACVR,EAAKS,SCVDC,EAAsB,SAAC,GAAD,IAAGd,EAAH,EAAGA,MAAH,OACjC,wBAAIY,UAAU,QACXZ,EAAME,KAAI,SAAAa,GAAI,OACb,wBAAIC,IAAKD,EAAKR,GAAIK,UAAU,YAC1B,kBAAC,EAAD,CAAUT,KAAMY,UCiDTE,G,kNAjDbC,MAAQ,CACNC,WAAW,EACXC,SAAU,I,EAGZC,Q,sBAAU,4BAAA7B,EAAA,6DACR,EAAK8B,SAAS,CACZH,WAAW,IAFL,SAImBpB,IAJnB,OAIFwB,EAJE,OAOR,EAAKD,SAAS,CACZH,WAAW,EACXC,SAAUG,IATJ,2C,uDAaA,IAAD,EACyBC,KAAKN,MAA7BC,EADD,EACCA,UAAWC,EADZ,EACYA,SAEnB,OACE,oCACGD,EACG,qDACA,GACJ,oDACA,2BACE,yCACCC,EAASK,QAES,IAApBL,EAASK,OAEN,4BACEC,KAAK,SACLC,QAASH,KAAKH,QACdO,SAAUT,GAETA,EAAY,UAAY,QAG3B,GAEJ,kBAAC,EAAD,CAAUnB,MAAOoB,S,GA5CPS,IAAMC,YCPxBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.cb335eac.chunk.js","sourcesContent":["import { API_URL_TODOS, API_URL_USERS } from '../constants';\nimport { Todo, User, TodosWithUser } from '../interfaces';\n\nconst getData = async <T>(url: string): Promise<T[]> => {\n  const response = await fetch(url).then(respond => respond.json());\n\n  return response.data;\n};\n\nexport const getPrepearedTodos = async (): Promise<TodosWithUser[]> => {\n  const todos = await getData<Todo>(API_URL_TODOS);\n  const users = await getData<User>(API_URL_USERS);\n\n  return todos.map(todo => ({\n    ...todo,\n    user: users.find(person => person.id === todo.userId)!,\n  }));\n};\n","export const API_URL_TODOS = 'https://mate.academy/students-api/todos';\nexport const API_URL_USERS = 'https://mate.academy/students-api/users';\n","import React, { FC } from 'react';\nimport './TodoItem.css';\nimport { TodosWithUser } from '../../interfaces';\n\ninterface Props {\n  todo: TodosWithUser;\n}\n\nexport const TodoItem: FC<Props> = ({ todo }) => {\n  const { completed, title, user } = todo;\n\n  return (\n    <>\n      <div className={completed ? 'done' : 'undone'} />\n      <p className=\"task\">\n        {title}\n      </p>\n      <p className=\"person\">\n        {user.name}\n      </p>\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { TodosWithUser } from '../../interfaces';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ninterface Props {\n  todos: TodosWithUser[];\n}\n\nexport const TodoList: FC<Props> = ({ todos }) => (\n  <ul className=\"list\">\n    {todos.map(task => (\n      <li key={task.id} className=\"listItem\">\n        <TodoItem todo={task} />\n      </li>\n    ))}\n  </ul>\n);\n","import React from 'react';\nimport { TodosWithUser } from './interfaces';\nimport { getPrepearedTodos } from './api/api';\nimport { TodoList } from './components/TodoList/TodoList';\nimport './App.css';\n\ninterface State {\n  isLoading: boolean;\n  todoList: TodosWithUser[];\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    isLoading: false,\n    todoList: [],\n  };\n\n  getList = async () => {\n    this.setState({\n      isLoading: true,\n    });\n    const combinedData = await getPrepearedTodos();\n    // console.log(combinedData)\n\n    this.setState({\n      isLoading: false,\n      todoList: combinedData,\n    });\n  };\n\n  render() {\n    const { isLoading, todoList } = this.state;\n\n    return (\n      <>\n        {isLoading\n          ? <h1>Dynamic list of TODOs</h1>\n          : ''}\n        <h1>Static list of todos</h1>\n        <p>\n          <span>Todos: </span>\n          {todoList.length}\n        </p>\n        {todoList.length === 0\n          ? (\n            <button\n              type=\"button\"\n              onClick={this.getList}\n              disabled={isLoading}\n            >\n              {isLoading ? 'loading' : 'Load'}\n            </button>\n          )\n          : ''}\n\n        <TodoList todos={todoList} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}